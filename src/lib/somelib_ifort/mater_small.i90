# 1 "/home/er7128ja/Nextcloud/Projekt/Project_Code_2D/src/lib/somelib_ifort/mater_small.f90"
module mater_small

! last modified
! M. Ristinmaa 2011-04-28
!  - module changed name
! M. Ristinmaa 2011-05-02
!  - introduced 4x4 matrix plane strain hooke
!  - mises implemented
! M. Ristinmaa 2020-02-17
!  - implemented damage model
!
! ------------------------------------------------------------------------------
!

implicit none

interface mises
   module procedure mises1
   module procedure mises2
end interface


!-------------------------------------------------------------------------------

contains

subroutine mises1(svm,ss)
  implicit none
  double precision                :: svm, ss(:)
  double precision                :: s(3,3)

  if (size(ss).eq.3) then
    s(1,:)=(/ss(1),ss(3),0d0/)
    s(2,:)=(/ss(3),ss(2),0d0/)
    s(3,:)=(/0d0,0d0,0d0/)
  elseif (size(ss).eq.4) then
    s(1,:)=(/ss(1),ss(4),0d0/)
    s(2,:)=(/ss(4),ss(2),0d0/)
    s(3,:)=(/0d0,0d0,ss(3)/)
  else
   stop 'mises not implemented'
  endif

  svm=dsqrt(s(1,1)**2D0+s(2,2)**2D0+s(3,3)**2D0-s(1,1)*s(2,2)-s(1,1)*s(3,3)-s(2,2)*s(3,3)&
                         +3D0*s(1,2)**2D0+3D0*s(1,3)**2D0+3D0*s(2,3)**2D0)

  return
end subroutine mises1


subroutine mises2(svm,ss)
  implicit none
  double precision                :: svm(:), ss(:,:)
  double precision                :: s(3,3)
  integer                         :: ii

  do ii=1,size(ss,2)
    if (size(ss,1).eq.3) then
      s(1,:)=(/ss(ii,1),ss(ii,3),0d0/)
      s(2,:)=(/ss(ii,3),ss(ii,2),0d0/)
      s(3,:)=(/0d0,0d0,0d0/)
    else
      stop 'mises not implemented'
    endif

    svm(ii)=dsqrt(s(1,1)**2D0+s(2,2)**2D0+s(3,3)**2D0-s(1,1)*s(2,2)-s(1,1)*s(3,3)-s(2,2)*s(3,3)&
                         +3D0*s(1,2)**2D0+3D0*s(1,3)**2D0+3D0*s(2,3)**2D0)
  end do

  return
end subroutine mises2


subroutine hooke(D,ptype,E,v)
  implicit none
  double precision        :: D(:,:), E, v
  integer                 :: ptype

  if (ptype.eq.1) then
        D=E/(1d0-v**2d0)*reshape((/1d0,   v, 0d0,&
                                   v  , 1d0, 0d0,&
                                   0d0, 0d0, (1d0-v)*0.5d0/),&
                                  [3,3], order=[2,1])
  elseif (ptype.eq.2) then
        D=E/(1d0+v)/(1d0-2d0*v)&
                       *reshape((/1d0-v,     v,   0d0,&
                                  v    , 1d0-v,   0d0,&
                                  0d0  ,   0d0,  (1d0-2d0*v)*0.5d0/), &
                                  [3,3], order=[2,1])
  else
    write(*,*) 'Error ! Check first argument, ptype=1 or 2 allowed'
    stop
  end if

return
end subroutine hooke

! damage model 1

subroutine stress_damage(ss,ee,ptype,E,v,da)
  implicit none
  double precision        :: ss(:), ee(:), E, v, da
  integer                 :: ptype

  double precision        :: G, K, m(3), edv(3), sdv(3), skk, ekk
  double precision        :: Hp, Hn, I1, D(3,3)

  parameter         (m=[(/1d0,1d0,0d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
  
  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then
  
    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    I1=ee(1)+ee(2)
    edv=(ee-1d0/3d0*I1*m) 
    edv(3)=edv(3)/2d0 ! fix for 2*strain_12
    ss=(1d0-da)**2d0*(2d0*G*edv+Hp*K*I1*m)+Hn*K*I1*m
    call Dm_damage(D,2,E,v,da,ee)
    ss=matmul(D,ee)

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine stress_damage

subroutine energy_damage(energy_pos,ee,ptype,E,v)
  implicit none
  double precision        :: energy_pos, ee(:), E, v
  integer                 :: ptype

  double precision        :: G, K, m(3), edv(3)
  double precision        :: Hp, Hn, I1

  parameter         (m=[(/1d0,1d0,0d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
  

  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then

    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    I1=ee(1)+ee(2)
    edv=(ee-1d0/3d0*I1*m) 
    edv(3)=edv(3)/2d0 ! fix for 2*strain_12
    energy_pos=0.5d0*(Hp*K*I1**2D0+2D0*G*(edv(1)**2d0+edv(2)**2d0+2d0*edv(3)**2d0))

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine energy_damage
	
	
subroutine Dm_damage(D,ptype,E,v,da,ee)
  implicit none
  double precision        :: D(:,:), ee(:), E, v, da
  integer                 :: ptype

  double precision        :: G, K, mm3(3,3), ind3(3,3)
  double precision        :: Hp, Hn

  parameter        (ind3=[(/1d0,0d0,0d0/), &
                          (/0d0,1d0,0d0/), &
                          (/0d0,0d0,0.5d0/)])
  parameter         (mm3=[(/1d0,1d0,0d0/), &
                          (/1d0,1d0,0d0/), &
                          (/0d0,0d0,0d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
 
  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then

    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    D=(1d0-da)**2d0*(Hp*K*mm3+2d0*G*(ind3-1d0/3d0*mm3))+Hn*K*mm3

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine Dm_damage
	


!------------------ damage model 2
! this is the implementation of the damage model above
! using Alessandros notes
! note this is not correct

subroutine stress_damage2(ss,ee,ptype,E,v,da)
!
!  ss  : stress
!  ee  : strain [E_11, E_22, 2E_12]
!
  implicit none
  double precision        :: ss(:), ee(:), E, v, da
  integer                 :: ptype

  double precision        :: G, K, m(3), edv(3), sdv(3), skk, ekk
  double precision        :: Hp, Hn, I1, I3(3,3), mm3(3,3), Idv3(3,3), Ind3(3,3)

  parameter        (ind3=[(/1d0,0d0,0d0/), &
                          (/0d0,1d0,0d0/), &
                          (/0d0,0d0,0.5d0/)])
  parameter         (m=[(/1d0,1d0,0d0/)])
  parameter         (mm3=[(/1d0,1d0,0d0/), &  !m*m^T
                          (/1d0,1d0,0d0/), &
                          (/0d0,0d0,0d0/)])
  parameter         (I3=[(/1d0,0d0,0d0/), &
                         (/0d0,1d0,0d0/), &
                         (/0d0,0d0,1d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
  

  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then

    I1=ee(1)+ee(2) 
    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    Idv3=I3-1d0/3d0*mm3
    edv=matmul(Idv3,ee)
! Allessandros notes
    ss=(1d0-da)**2d0*(Hp*K*I1*m+2d0*G*matmul(Idv3,edv))+Hn*K*I1*m
! Correct
!    ss=(1d0-da)**2d0*(Hp*K*I1*m+2d0*G*matmul(Ind3,edv))+Hn*K*I1*m

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine stress_damage2

subroutine energy_damage2(energy_pos,ee,ptype,E,v)
  implicit none
  double precision        :: energy_pos, ee(:), E, v
  integer                 :: ptype

  double precision        :: G, K, m(3), edv(3), edvm(2,2), I3(3,3), mm3(3,3)
  double precision        :: Hp, Hn, I1

  parameter         (m=[(/1d0,1d0,0d0/)])
  parameter         (mm3=[(/1d0,1d0,0d0/), &
                          (/1d0,1d0,0d0/), &
                          (/0d0,0d0,0d0/)])
  parameter         (I3=[(/1d0,0d0,0d0/), &
                         (/0d0,1d0,0d0/), &
                         (/0d0,0d0,1d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
  

  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then

    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    I1=ee(1)+ee(2) 
    stop
!   edv=matmul(I3-1d0/3d0*mm3,ee)
    energy_pos=0.5d0*(Hp*K*I1**2D0+2D0*G*(edv(1)**2d0+edv(2)**2d0+2d0*edv(3)**2d0))

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine energy_damage2
	
	
subroutine Dm_damage2(D,ptype,E,v,da,ee)
  implicit none
  double precision        :: D(:,:), ee(:), E, v, da
  integer                 :: ptype

  double precision        :: G, K, mm3(3,3), ind3(3,3), dv(3,3), dd(3,3), I3(3,3), idv3(3,3)
  double precision        :: Hp, Hn

  parameter        (ind3=[(/1d0,0d0,0d0/), &
                          (/0d0,1d0,0d0/), &
                          (/0d0,0d0,0.5d0/)])
  parameter         (mm3=[(/1d0,1d0,0d0/), &
                          (/1d0,1d0,0d0/), &
                          (/0d0,0d0,0d0/)])
  parameter         (I3=[(/1d0,0d0,0d0/), &
                         (/0d0,1d0,0d0/), &
                         (/0d0,0d0,1d0/)])

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)
 

  if (ptype.eq.1) then
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  elseif (ptype.eq.2) then

    if ((ee(1)+ee(2))<0d0) then
      Hn=1d0
      Hp=0d0
    else
      Hn=0d0
      Hp=1d0
    endif
    Idv3=(I3-1d0/3d0*mm3)
    Dv=K*mm3
! In alessandros notes
    Dd=2d0*G*matmul(Idv3,Idv3) !Idv3
! Correct
!    Dd=2d0*G*Ind3
    D=(1d0-da)**2d0*(Hp*Dv+Dd)+Hn*Dv

  else
    write(*,*) 'Error ! Check first argument, ptype= 2 allowed'
    stop
  end if

return
end subroutine Dm_damage2
	
	
end module mater_small
