module mater_magnjav

! Last modified
! M. Ristinmaa 2021-02-13
!  initial version
! M. Ristinmaa 2021-02-14
!  tangent is dB=mu*dH is implemented
! M. Ristinmaa 2021-02-14
!  changed order new,iel,gp to gp,iel,new
!-----------------------------------------------------------------------------
!
! contains the Jiles-Atherton hysteresis model
!  D.C. Jiles and D.L. Atherton, L. Magn. Magn. Mater, vol 61, 48-60, 1986.
! based on the vector format by
!  A. Bergqvist IEEE transaction on magnetics, vol 32, 4213-4215, 1996
! and inverse format by
!  J.V. Leite et al IEEE transactions on magnetics, vol 10, 1769-1775, 2004

use matrix_util, only: inv3 

implicit none

interface magmater_javcalc
   module procedure magmater_javcalcH1
   module procedure magmater_javcalcH2
end interface
private magmater_javcalcH1, magmater_javcalcH2

interface magmater_javmater_get
   module procedure magmater_javmater_getH1
   module procedure magmater_javmater_getH2
end interface
private magmater_javmater_getH1, magmater_javmater_getH2


private magmater_javtangent

  double precision, allocatable     :: propEM(:,:)
  double precision, allocatable     :: Bsave(:,:,:,:), Hsave(:,:,:,:)

  integer, allocatable              :: matId(:)
  integer                           :: New, Old

  double precision, parameter       :: mu0=1.256637061435917d-06

  private propEM, matID, mu0, Bsave, Hsave
  private New, Old

!-----------------------------------------------------------------------------
contains


subroutine magmater_javinit(propEMin,matIdin,nip)
implicit none

double precision                  :: propEMin(:,:)
integer                           :: matIdin(:), nip

integer                           :: nels, nprp, ierr, nmat

  nels=size(matIdin)
  nmat=size(propEmin,1)
  nprp=size(propEMin,2)

  write(*,*)'element ',nels,nip,nmat,nprp

  allocate(matId(nels), stat=ierr)
  allocate(propEM(nmat,18), stat=ierr)

  propEM=0d0
  if (nprp.eq.6) then 
! isotropy
    propEM(:,1)=propEmin(:,1)    !sx
    propEM(:,2)=propEmin(:,1)    !sy
    propEM(:,3)=propEmin(:,1)    !sz
    propEM(:,4)=propEmin(:,2)    !cx
    propEM(:,5)=propEmin(:,2)    !cy
    propEM(:,6)=propEmin(:,2)    !cz
    propEM(:,7)=propEmin(:,3)    !ax
    propEM(:,8)=propEmin(:,3)    !ay
    propEM(:,9)=propEmin(:,3)    !az
    propEM(:,10)=propEmin(:,4)    !alphax
    propEM(:,11)=propEmin(:,4)    !alphay
    propEM(:,12)=propEmin(:,4)    !alphaz
    propEM(:,13)=propEmin(:,5)   !Msx
    propEM(:,14)=propEmin(:,5)   !Msy
    propEM(:,15)=propEmin(:,5)   !Msz
    propEM(:,16)=propEmin(:,6)   !kx
    propEM(:,17)=propEmin(:,6)   !ky
    propEM(:,18)=propEmin(:,6)   !kz
  else
    propEM=propEMin
  end if

  matId=matIdin

  allocate(Bsave(3,nip,nels,2), stat=ierr)
  IF (ierr /= 0) STOP "*** Not enough memory ***"
  allocate(Hsave(3,nip,nels,2), stat=ierr)
  IF (ierr /= 0) STOP "*** Not enough memory ***"
!  allocate(Bsave(2,nels,nip,3), stat=ierr)
!  allocate(Hsave(2,nels,nip,3), stat=ierr)

  Bsave=0d0
  Hsave=0d0
  New=2
  Old=1

end subroutine magmater_javinit


subroutine magmater_javaccept
implicit none

  if (Old.eq.1) then
    New=1
    Old=2
  else
    New=2
    Old=1
  end if

end subroutine magmater_javaccept


subroutine magmater_javmater_getH1(mui,si,iel)
! routine for several gauss point
! provides the tangent dH=mui*dB
implicit none

double precision                 :: mui(:,:,:), si(:,:,:)
integer                          :: iel

double precision                 :: mui3(3,3)
integer                          :: ngp, i, ndim


  ngp=size(mui,3)
  ndim=size(mui,2)
  mui=0d0
  si=0d0
  do i=1,ngp
    call magmater_javmater_getH2(mui3,iel,i)
!    call magmater_javmater_getH2(iel,i)

!  if (ndim.eq.3) then
!    mui(:,:,i)=mui3
!    si=0d0
!    si(1,1,i)=propEm(matId(iel),1)
!    si(2,2,i)=propEm(matId(iel),1)
!    si(3,3,i)=propEm(matId(iel),1)
!  else
!    mui(1:2,1:2,i)=mui3(1:2,1:2)
!    si(1,1,i)=propEm(matId(iel),1)
!    si(2,2,i)=propEm(matId(iel),1)
!  end if 
   
  end do
 

end subroutine magmater_javmater_getH1

 
subroutine magmater_javmater_getH2(mui,iel,igp)
!subroutine magmater_javmater_getH2(iel,igp)
!subroutine magmater_javmater_getH2(iel,igp)
! routine for one gauss point
! provides the tangent dH=mui*dB
implicit none

!double precision                 :: mui(:,:)
double precision, intent(out)                 :: mui(:,:)
integer                          :: iel, igp
!integer, optional                :: igp

double precision                 :: K(3,3), Bcurr(3), Bcont(3), Mcurr(3), Hcurr(3)
double precision                 :: mpropEM(18), Id(3,3)
integer                          :: gp
  
!  iel=9
!  igp=1
! special for 3-node element with one gauss point, if call without igp
!  if(present(igp))then
!    gp=igp
!  else
!    gp=1  
!  endif
  gp=igp
  write(*,*)'gausspoint ',gp,iel,matId(iel)
! specific material
  mpropEM=propEm(matId(iel),:)
    
! tangent should be calculated at current state Bcurr
! for this purpose we assume that the dB will continue in
! the same direction as in the previous increment providing Bcont
! this is only use for the selection revesible or irrevesible 

write(*,*)'jav 1' ,gp,iel,new, old
write(*,*)'sizeB ',size(Bsave,1),size(Bsave,2),size(Bsave,3),size(Bsave,4)
write(*,*)'sizeB ',size(Hsave,1),size(Hsave,2),size(Hsave,3),size(Hsave,4)
write(*,*)'hsave ',Hsave(:,gp,iel,new)
  Bcurr=Bsave(:,gp,iel,new)
  Hcurr=Hsave(:,gp,iel,new)
  Bcont=Bcurr+(Bsave(:,gp,iel,new)-Bsave(:,gp,iel,old))
  Mcurr=Bcurr/mu0-Hcurr


 !write(*,*)iel,gp
 !pause
 write(*,*)'Bcurr ',Bcurr
 write(*,*)'Bcont ',Bcont
 write(*,*)'Mcurr ',Mcurr
 write(*,*)'Mprop ',mpropEM
 write(*,*)'K     ',K
 
write(*,*)'jav 2' 
  call magmater_javtangent(K,Bcont,Bcurr,Mcurr,mpropEM)
!  call fake(K,Bcont,Bcurr,Mcurr,mpropEM)
write(*,*)'jav 3'

  Id(1,:)=[1d0, 0d0, 0d0]
  Id(2,:)=[0d0, 1d0, 0d0]
  Id(3,:)=[0d0, 0d0, 1d0]
  
!  dM=K*dB
!  dH=dB/mu0-dM
  mui=(Id/mu0-K)

end subroutine magmater_javmater_getH2


subroutine magmater_javcalcH1(H,B,iel)
implicit none

double precision                  :: H(:,:), B(:,:)
integer                           :: iel

integer                           :: igp, ngp
  
  ngp=size(B,1)
  do igp=1,ngp
    call magmater_javcalcH2(H(:,igp),B(:,igp),iel,igp)
  end do
  
end subroutine magmater_javcalcH1



subroutine magmater_javcalcH2(H,B,iel,igp)
! Using ode23 solver for the J-A mode
! local error control is used to calculate 
! if sub-steps are needed.
! ode is  given by dM=f(M)=K*dB
implicit none

double precision                  :: H(:), B(:)
integer                           :: iel
integer, optional                 :: igp

double precision                  :: dB(3), dBstep(3), Bstart(3), Bend(3), Binit(3), K(3,3)
double precision                  :: Mstart(3), Msin(3), Bsin(3), H3(3), Mold(3), M(3)
double precision                  :: s1(3), s2(3), s3(3), s4(3), error(3), mpropEM(18)
double precision                  :: hs
integer                           :: conv, steps, gp, i
  
! special for 3-node element with one gauss point, if call without igp
  if(present(igp))then
    gp=igp
  else
    gp=1
  endif

! specific material
  mpropEM=propEm(matId(iel),:)
  
! We should have a general 3D format  
  if (size(B).eq.3) then
    dB=B-Bsave(:,gp,iel,old)
!    dB=B-Bsave(old,iel,gp,:)
  else
    ! 2D problem
    dB(1)=B(1)-Bsave(1,gp,iel,old)
    dB(2)=B(2)-Bsave(2,gp,iel,old)
!    dB(1)=B(1)-Bsave(old,iel,gp,1)
!    dB(2)=B(2)-Bsave(old,iel,gp,2)
    dB(3)=0d0
  end if
  Mold=Bsave(:,gp,iel,old)/mu0-Hsave(:,gp,iel,old)
  Binit=Bsave(:,gp,iel,old)
!  Mold=Bsave(old,iel,gp,:)/mu0-Hsave(old,iel,gp,:)
!  Binit=Bsave(old,iel,gp,:)
  
  steps=1
  conv=0

  do while (conv.eq.0)

    dBstep=dB/dble(steps)
    M=Mold
    hs=1d0
    conv=1

    i=1
    do while (i.le.steps.and.conv.eq.1) 
      
      Mstart=M
      Bstart=Binit+dBstep*dble(i-1)
      Bend=Bstart+dBstep

      ! stage 1

      Msin=Mstart
      Bsin=Bstart
      call magmater_javtangent(K,Bend,Bsin,Msin,mpropEM)
      s1=matmul(K,Bend-Bstart)
      ! stage 2
 
      Msin=Mstart+hs/2d0*s1
      Bsin=Bstart+hs/2d0*dBstep
      call magmater_javtangent(K,Bend,Bsin,Msin,mpropEM)
      s2=matmul(K,Bend-Bstart)
      ! stage 3

      Msin=Mstart+3d0*hs/4d0*s2
      Bsin=Bstart+3d0*hs/4d0*dBstep
      call magmater_javtangent(K,Bend,Bsin,Msin,mpropEM)
      s3=matmul(K,Bend-Bstart)

      ! value

      M=Mstart+hs/9d0*(2d0*s1+3d0*s2+4d0*s3)

      ! error estimate

      call magmater_javtangent(K,Bend,Bend,M,mpropEM)
      s4=matmul(K,Bend-Bstart)

      error=hs/72d0*(-5d0*s1+6d0*s2+8d0*s3-9d0*s4)

      if (dsqrt(dot_product(error,error)).gt.50d0) then
        conv=0
      end if

      i=i+1

    end do

    if (conv.eq.0) then
      steps=steps+4
    end if

  end do

  H3=B/mu0-M

! store values
  Hsave(:,gp,iel,new)=H3
  Bsave(:,gp,iel,new)=B
!  Hsave(new,iel,gp,:)=H3
!  Bsave(new,iel,gp,:)=B

  if (size(B).eq.3) then
    H=H3
  else
    ! 2D problem
    H(1)=H3(1)
    H(2)=H3(2)
  end if
  
end subroutine magmater_javcalcH2


subroutine fake(K,B,Bt,Mold,mpropEm)
! Calculate the tangent of the J-A model
! dM=K*dB where dB is a given steps, in ode-format
! we have that dM=f(M), i.e. input is M (Mold in call)
! Note that Bt and Mold must be calculated at the same 
! time instant, i.e. Bt(t_i) Mold(t_i)
! B the end value is only used for selection between
! reversible and irreversible
!  
implicit none

double precision, intent(in)      :: B(:), Bt(:), Mold(:), mpropEM(:)
double precision, intent(out)     :: K(:,:)

double precision                  :: Hold(3), He(3), Hguess(3), dH(3), dMan(3)
double precision                  :: normHe, val, Manx, Many, Manz

double precision                  :: ax, ay, az, Msx, Msy, Msz, xsix, xsiy, xsiz
double precision                  :: chix, chiy, chiz, kx, ky, kz
double precision                  :: cx, cy, cz, alphax, alphay, alphaz
double precision                  :: cM(3,3), alphaM(3,3), kM(3,3), xsiM(3,3), chim(3,1)

double precision                  :: tmp1(3,3), tmp2(3,3), tmpinv(3,3), normchi, Id(3,3)
double precision                  :: tmpv(3)

write(*,*)'t0 ' 

! define useful matrices and material parameters
  write(*,*)propEm(2,4),propEm(2,5),propEm(2,6) 
  write(*,*)mpropEM(4)!, mpropEM(5), mpropEM(6)
  cx=mpropEM(4)
  cy=mpropEM(5)
  cz=mpropEM(6)
  write(*,*)cx,cy,cz
  cM(1,:)=[cx, 0d0, 0d0]
  cM(2,:)=[0d0, cy, 0d0]
  cM(3,:)=[0d0, 0d0, cz]
 
  write(*,*)'B   ',size(B)   

write(*,*)'t01 '
  ax=mpropEM(7)
  ay=mpropEM(8)
  az=mpropEM(9)

  alphax=mpropEM(10)
  alphay=mpropEM(11)
  alphaz=mpropEM(12)
  alphaM(1,:)=[alphax, 0d0, 0d0]
  alphaM(2,:)=[0d0, alphay, 0d0]
  alphaM(3,:)=[0d0, 0d0, alphaz]

write(*,*)'t02 '
  Msx=mpropEM(13)
  Msy=mpropEM(14)
  Msz=mpropEM(15)

  kx=mpropEM(16)
  ky=mpropEM(17)
  kz=mpropEM(18)
  kM(1,:)=[kx, 0d0, 0d0]
  kM(2,:)=[0d0, ky, 0d0]
  kM(3,:)=[0d0, 0d0, kz]
write(*,*)'t03 '

  Id(1,:)=[1d0, 0d0, 0d0]
  Id(2,:)=[0d0, 1d0, 0d0]
  Id(3,:)=[0d0, 0d0, 1d0]
  
! calculation
write(*,*)'t04 '
  write(*,*)'Bt   ',Bt
  write(*,*)'Mold ',Mold
 ! dB=B-B0
  Hold=Bt/mu0-Mold
write(*,*)'t04 '
  He=Hold+matmul(alphaM,Mold)
write(*,*)'t04 '
  normHe=dsqrt(dot_product(He,He))
write(*,*)'t01 '

  if (dabs(normHe).lt.1d-6) normHe=1d-6

  Manx=Msx*(1d0/dtanh(normHe/ax)-ax/normHe)*He(1)/normHe
  Many=Msy*(1d0/dtanh(normHe/ay)-ay/normHe)*He(2)/normHe
  Manz=Msz*(1d0/dtanh(normHe/az)-az/normHe)*He(3)/normHe

write(*,*)'t1 '

 
  xsix=Msx/ax*(1d0-1d0/dtanh(normHe/ax)**2+(ax/normHe)**2)*He(1)**2/normHe**2 &
     + Msx*(1d0/tanh(normHe/ax)-ax/normHe)*(1d0/normHe-He(1)**2/normHe**3)
  xsiy=Msy/ay*(1d0-1d0/dtanh(normHe/ay)**2+(ay/normHe)**2)*He(2)**2/normHe**2 &
     + Msy*(1d0/tanh(normHe/ay)-ay/normHe)*(1d0/normHe-He(2)**2/normHe**3)
  xsiz=Msy/az*(1d0-1d0/dtanh(normHe/az)**2+(az/normHe)**2)*He(3)**2/normHe**2 &
     + Msy*(1d0/dtanh(normHe/az)-az/normHe)*(1d0/normHe-He(3)**2/normHe**3)

write(*,*)'t2 '


end subroutine fake


subroutine magmater_javtangent(K,B,Bt,Mold,mpropEm)
! Calculate the tangent of the J-A model
! dM=K*dB where dB is a given steps, in ode-format
! we have that dM=f(M), i.e. input is M (Mold in call)
! Note that Bt and Mold must be calculated at the same 
! time instant, i.e. Bt(t_i) Mold(t_i)
! B the end value is only used for selection between
! reversible and irreversible
!  
implicit none

double precision, intent(in)                  :: B(:), Bt(:), Mold(:), mpropEm(:)
double precision, intent(out)                  :: K(:,:)

double precision                  :: Hold(3), He(3), Hguess(3), dH(3), dMan(3)
double precision                  :: normHe, val, Manx, Many, Manz

double precision                  :: ax, ay, az, Msx, Msy, Msz, xsix, xsiy, xsiz
double precision                  :: chix, chiy, chiz, kx, ky, kz
double precision                  :: cx, cy, cz, alphax, alphay, alphaz
double precision                  :: cM(3,3), alphaM(3,3), kM(3,3), xsiM(3,3), chim(3,1)

double precision                  :: tmp1(3,3), tmp2(3,3), tmpinv(3,3), normchi, Id(3,3)
double precision                  :: tmpv(3)

write(*,*)'t0 ' 

! define useful matrices and material parameters
  write(*,*)propEm(2,4),propEm(2,5),propEm(2,6) 
  write(*,*)size(mpropEM)
  write(*,*)mpropEM(4)!, mpropEM(5), mpropEM(6)
  cx=mpropEM(4)
  cy=mpropEM(5)
  cz=mpropEM(6)
  write(*,*)cx,cy,cz
  cM(1,:)=[cx, 0d0, 0d0]
  cM(2,:)=[0d0, cy, 0d0]
  cM(3,:)=[0d0, 0d0, cz]
 
  write(*,*)'B   ',size(B)   

write(*,*)'t01 '
  ax=mpropEM(7)
  ay=mpropEM(8)
  az=mpropEM(9)

  alphax=mpropEM(10)
  alphay=mpropEM(11)
  alphaz=mpropEM(12)
  alphaM(1,:)=[alphax, 0d0, 0d0]
  alphaM(2,:)=[0d0, alphay, 0d0]
  alphaM(3,:)=[0d0, 0d0, alphaz]

write(*,*)'t02 '
  Msx=mpropEM(13)
  Msy=mpropEM(14)
  Msz=mpropEM(15)

  kx=mpropEM(16)
  ky=mpropEM(17)
  kz=mpropEM(18)
  kM(1,:)=[kx, 0d0, 0d0]
  kM(2,:)=[0d0, ky, 0d0]
  kM(3,:)=[0d0, 0d0, kz]
write(*,*)'t03 '

  Id(1,:)=[1d0, 0d0, 0d0]
  Id(2,:)=[0d0, 1d0, 0d0]
  Id(3,:)=[0d0, 0d0, 1d0]
  
! calculation
write(*,*)'t04 ' 
  write(*,*)'Bt   ',Bt
  write(*,*)'Mold ',Mold
 ! dB=B-B0 
  Hold=Bt/mu0-Mold
write(*,*)'t04 ' 
  He=Hold+matmul(alphaM,Mold)
write(*,*)'t04 '
  normHe=dsqrt(dot_product(He,He))
write(*,*)'t01 ' 

  if (dabs(normHe).lt.1d-6) normHe=1d-6

  Manx=Msx*(1d0/dtanh(normHe/ax)-ax/normHe)*He(1)/normHe
  Many=Msy*(1d0/dtanh(normHe/ay)-ay/normHe)*He(2)/normHe
  Manz=Msz*(1d0/dtanh(normHe/az)-az/normHe)*He(3)/normHe

write(*,*)'t1 '
 
  xsix=Msx/ax*(1d0-1d0/dtanh(normHe/ax)**2+(ax/normHe)**2)*He(1)**2/normHe**2 &
     + Msx*(1d0/tanh(normHe/ax)-ax/normHe)*(1d0/normHe-He(1)**2/normHe**3)
  xsiy=Msy/ay*(1d0-1d0/dtanh(normHe/ay)**2+(ay/normHe)**2)*He(2)**2/normHe**2 &
     + Msy*(1d0/tanh(normHe/ay)-ay/normHe)*(1d0/normHe-He(2)**2/normHe**3)
  xsiz=Msy/az*(1d0-1d0/dtanh(normHe/az)**2+(az/normHe)**2)*He(3)**2/normHe**2 &
     + Msy*(1d0/dtanh(normHe/az)-az/normHe)*(1d0/normHe-He(3)**2/normHe**3)

  xsiM(1,:)=[xsix, 0d0, 0d0]
  xsiM(2,:)=[0d0, xsiy, 0d0]
  xsiM(3,:)=[0d0, 0d0, xsiz]
write(*,*)'t2 '

  chix=1/kx*(Manx-Mold(1))
  chiy=1/ky*(Many-Mold(2))
  chiz=1/kz*(Manz-Mold(3))
  chim(1,1)=chix
  chim(2,1)=chiy
  chim(3,1)=chiz
  normchi=dsqrt(dot_product(reshape(chim,(/3/)),reshape(chim,(/3/))))
  if (dabs(normchi).lt.1d-6) normchi=1d-6
write(*,*)'t3 '

! check 
  Hguess=B/mu0-Mold
  dH=Hguess-Hold
  dMan=matmul(xsiM,dH)

  val=dot_product(reshape(chim,(/3/)),dH+matmul(alphaM,matmul(cM,dMan)))
write(*,*)'t4 '

  if (val.gt.0d0) then
! irrevesible part exists

    tmp1=matmul(chim,transpose(chim))/normchi+matmul(cM,xsiM)
    tmp2=Id+matmul(matmul(chim,transpose(chim))/normchi,(Id-alphaM)) & 
        +matmul(cM,matmul(xsiM,(Id-alphaM)))
    call inv3(tmpinv,tmp2)
    K=1d0/mu0*matmul(tmpinv,tmp1)
    
  else
! reversible
! all matrices are diagonal

    tmpv(1)=1d0/(1d0+cx*xsix*(1d0-alphax))
    tmpv(2)=1d0/(1d0+cy*xsiy*(1d0-alphay))
    tmpv(3)=1d0/(1d0+cz*xsiz*(1d0-alphaz))
    K=0d0
    K(1,1)=tmpv(1)*cx*xsix/mu0
    K(2,2)=tmpv(2)*cy*xsiy/mu0
    K(3,3)=tmpv(3)*cz*xsiz/mu0

!    tmp2=Id+matmul(cM,matmul(xsiM,Id-alphaM))
!    call inv3(tmpinv,tmp2)
!    K=1d0/mu0*matmul(tmpinv,matmul(cM,xsiM))

  end if

end subroutine magmater_javtangent


subroutine magmater_javpara_get(prop,iel)
implicit none

double precision                  :: prop(:)
integer                           :: iel

   prop=propEM(matId(iel),:)

end subroutine magmater_javpara_get


end module  mater_magnjav
