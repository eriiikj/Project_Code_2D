# 1 "/home/er7128ja/Nextcloud/Projekt/Project_Code_2D/src/lib/somelib_gfortran/elem_large_cont_2d.f90"
module elem_large_cont_2d

! Last rev.:
!  M. Ristinmaa 2011-04-30
!   - Code from matlab implemented c2dxx3
!  M. Ristinmaa 2011-05-03
!   - Coordinate array transposed, column is now node coordinates
!  M. Ristinmaa 2021-07-01
!   - code for c2d4 implemented
!
!------------------------------------------------------------------------------
	
!  3-node element
!
!            3
!           / \
!          /   \
!         /     \
!        /       \
!       1---------2
!
!  4-node element
!
!      node location      gauss point location
!
!       4---------3                         eta
!       |         |            3----4        |
!       |         |            |    |        o-- xsi
!       |         |            1----2
!       1---------2
!
!   Module elem_large_cont_2d contains element subroutines
!   for large deformations.
!
!------------------------------------------------------------------------------

implicit none
! This is an attempt to predefine some vectors for the 4-node element, to obtain speed
double precision, parameter  :: G1=0.577350269189626D0
double precision, parameter  :: xsi4(4)=(/-1D0,  1D0, -1D0, 1D0/)*G1
double precision, parameter  :: eta4(4)=(/-1D0, -1D0,  1D0, 1D0/)*G1
private xsi4, eta4, G1

integer, parameter          :: index4(2,4)=reshape([(/1,2/),(/3,4/),(/5,6/),(/7,8/)], [2,4])
double precision, parameter :: Ifm(4)=(/1d0,0d0,0d0,1d0/)
private index4, Ifm

! 4 Gauss points and 4 nodes
double precision, parameter :: NR4_col1(4) = (1D0-XSI4)*(1D0-ETA4)/4D0
double precision, parameter :: NR4_col2(4) = (1D0+XSI4)*(1D0-ETA4)/4D0
double precision, parameter :: NR4_col3(4) = (1D0+XSI4)*(1D0+ETA4)/4D0
double precision, parameter :: NR4_col4(4) = (1D0-XSI4)*(1D0+ETA4)/4D0
double precision, parameter :: NR4(4,4)    = reshape([NR4_col1, NR4_col2, NR4_col3, NR4_col4], [4,4])
private NR4

! derivate of shape functions with respect to xsi
double precision, parameter :: DNR4_182_col1(4) = -(1D0-ETA4)/4D0
double precision, parameter :: DNR4_182_col2(4) =  (1D0-ETA4)/4D0
double precision, parameter :: DNR4_182_col3(4) =  (1D0+ETA4)/4D0
double precision, parameter :: DNR4_182_col4(4) = -(1D0+ETA4)/4D0

! derivate of shape functions with respect to eta
double precision, parameter :: DNR4_282_col1(4) = -(1D0-XSI4)/4D0
double precision, parameter :: DNR4_282_col2(4) = -(1D0+XSI4)/4D0
double precision, parameter :: DNR4_282_col3(4) =  (1D0+XSI4)/4D0
double precision, parameter :: DNR4_282_col4(4) =  (1D0-XSI4)/4D0

! Collect in DNR4
double precision, parameter :: DNR4(8,4)=reshape([DNR4_182_col1(1), DNR4_282_col1(1), DNR4_182_col1(2), DNR4_282_col1(2), &
                                                  DNR4_182_col1(3), DNR4_282_col1(3), DNR4_182_col1(4), DNR4_282_col1(4), &
                                                  DNR4_182_col2(1), DNR4_282_col2(1), DNR4_182_col2(2), DNR4_282_col2(2), &
                                                  DNR4_182_col2(3), DNR4_282_col2(3), DNR4_182_col2(4), DNR4_282_col2(4), &
                                                  DNR4_182_col3(1), DNR4_282_col3(1), DNR4_182_col3(2), DNR4_282_col3(2), &
                                                  DNR4_182_col3(3), DNR4_282_col3(3), DNR4_182_col3(4), DNR4_282_col3(4), &
                                                  DNR4_182_col4(1), DNR4_282_col4(1), DNR4_182_col4(2), DNR4_282_col4(2), &
                                                  DNR4_182_col4(3), DNR4_282_col4(3), DNR4_182_col4(4), DNR4_282_col4(4)], [8,4])
private DNR4

! help routines should be moved
private det2, inv2


!------------------------------------------------------------------------------
contains

	
! 3-node element based on updated Lagrangian formulation
subroutine c2dul3_e(ke,coord,ep,D,ed,es)
  implicit none
  double precision                :: ke(:,:), coord(:,:), ep
  double precision                :: D(:,:), ed(:), es(:)
  
  double precision                :: ex(3), ey(3), Area, idetA, detA, t
  double precision                :: B(3,6), H(4,6), S(4,4) 
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)+ed(1:5:2)
  ey=coord(2,:)+ed(2:6:2)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA

  t=ep
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))


  B(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  B(2,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)  
  B(3,:)=(/dN1dy, dN1dx, dN2dy, dN2dx, dN3dy, dN3dx/)

  H(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  H(2,:)=(/dN1dy,   0d0, dN2dy,   0d0, dN3dy,   0d0/)
  H(3,:)=(/  0d0, dN1dx,   0d0, dN2dx,   0d0, dN3dx/)
  H(4,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)

  S(1,:)=(/es(1), es(3),   0d0,   0d0/)
  S(2,:)=(/es(3), es(2),   0d0,   0d0/)
  S(3,:)=(/  0d0,   0d0, es(1), es(3)/)
  S(4,:)=(/  0d0,   0d0, es(3), es(2)/)

  Ke=matmul(transpose(B),matmul(D,B))+matmul(transpose(H),matmul(S,H))
  Ke=Ke*Area*t

end subroutine c2dul3_e


! calculates the deformation gradient
subroutine c2dul3_d(F,coord,ed)
  implicit none
  double precision                :: f(:), coord(:,:)
  double precision                :: ed(:)
  
  double precision                :: ex(3), ey(3)
  double precision                :: H(4,6), dudx(4), detA, Area, idetA
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)
  ey=coord(2,:)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))

  H(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  H(2,:)=(/dN1dy,   0d0, dN2dy,   0d0, dN3dy,   0d0/)
  H(3,:)=(/  0d0, dN1dx,   0d0, dN2dx,   0d0, dN3dx/)
  H(4,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)

  dudx=matmul(H,ed)
! du_1/dx_1, du_1/dx_2, du_2/dx_1, du_2/dx_2

  
   f(1)=dudx(1)+1d0
   f(2)=dudx(2)
   f(3)=dudx(3)
   f(4)=dudx(4)+1d0
	
end subroutine c2dul3_d


subroutine c2dul3_f(fe,coord,ep,ed,es)
  implicit none
  double precision                :: fe(:), coord(:,:), ep
  double precision                :: ed(:), es(:)
  
  double precision                :: ex(3), ey(3), Area, idetA, detA, t
  double precision                :: B(3,6)
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)+ed(1:5:2)
  ey=coord(2,:)+ed(2:6:2)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA

  t=ep
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))


  B(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  B(2,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)  
  B(3,:)=(/dN1dy, dN1dx, dN2dy, dN2dx, dN3dy, dN3dx/)

  fe=matmul(transpose(B),es)*Area*t

end subroutine c2dul3_f


! 3-node element based on total Lagrangian formulation
subroutine c2dtl3_e(ke,coord,ep,D,ed,es)
  implicit none
  double precision                :: ke(:,:), coord(:,:), ep
  double precision                :: D(3,3), ed(:), es(:)
  
  double precision                :: ex(3), ey(3), Area, idetA, detA, t
  double precision                :: B(3,6), H(4,6), S(4,4), A(3,4), A_tmp(4)
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)
  ey=coord(2,:)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA

  t=ep
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))


  B(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  B(2,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)  
  B(3,:)=(/dN1dy, dN1dx, dN2dy, dN2dx, dN3dy, dN3dx/)

  H(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  H(2,:)=(/dN1dy,   0d0, dN2dy,   0d0, dN3dy,   0d0/)
  H(3,:)=(/  0d0, dN1dx,   0d0, dN2dx,   0d0, dN3dx/)
  H(4,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)

  A_tmp=matmul(H,ed)

  A(1,:)=(/A_tmp(1),      0d0, A_tmp(3),      0d0/) 
  A(2,:)=(/     0d0, A_tmp(2),      0d0, A_tmp(4)/)
  A(3,:)=(/A_tmp(2), A_tmp(1), A_tmp(4), A_tmp(3)/)

  B=B+matmul(A,H)

  S(1,:)=(/es(1), es(3),   0d0,   0d0/)
  S(2,:)=(/es(3), es(2),   0d0,   0d0/)
  S(3,:)=(/  0d0,   0d0, es(1), es(3)/)
  S(4,:)=(/  0d0,   0d0, es(3), es(2)/)

  Ke=matmul(transpose(B),matmul(D,B))+ matmul(transpose(H),matmul(S,H))
  Ke=Ke*Area*t

end subroutine c2dtl3_e


! calculates the total deformation gradient
subroutine c2dtl3_d(F,coord,ed)
  implicit none
  double precision                :: f(:), coord(:,:)
  double precision                :: ed(:)
  
  double precision                :: ex(3), ey(3)
  double precision                :: H(4,6), dudx(4), detA, Area, idetA
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)
  ey=coord(2,:)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))

  H(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  H(2,:)=(/dN1dy,   0d0, dN2dy,   0d0, dN3dy,   0d0/)
  H(3,:)=(/  0d0, dN1dx,   0d0, dN2dx,   0d0, dN3dx/)
  H(4,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)

  dudx=matmul(H,ed)
! du_1/dx_1, du_1/dx_2, du_2/dx_1, du_2/dx_2

  
   f(1)=dudx(1)+1d0
   f(2)=dudx(2)
   f(3)=dudx(3)
   f(4)=dudx(4)+1d0
	
end subroutine c2dtl3_d


subroutine c2dtl3_f(fe,coord,ep,ed,es)
  implicit none
  double precision                :: fe(:), coord(:,:), ep
  double precision                :: ed(:), es(:)
  
  double precision                :: ex(3), ey(3), Area, idetA, detA, t
  double precision                :: B(3,6), H(4,6), A(3,4), A_tmp(4)
  double precision                :: dN1dx, dN2dx, dN3dx, dN1dy, dN2dy, dN3dy
  
  ex=coord(1,:)
  ey=coord(2,:)
  
  detA=ex(2)*ey(3)+ex(1)*ey(2)+ey(1)*ex(3)-ex(2)*ey(1)-ex(3)*ey(2)-ey(3)*ex(1)
  Area=detA*0.5D0
  idetA=1d0/detA

  t=ep
  
  dN1dx=idetA*(ey(2)-ey(3))
  dN2dx=idetA*(ey(3)-ey(1))
  dN3dx=idetA*(ey(1)-ey(2))

  dN1dy=idetA*(ex(3)-ex(2))
  dN2dy=idetA*(ex(1)-ex(3))
  dN3dy=idetA*(ex(2)-ex(1))


  B(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  B(2,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)  
  B(3,:)=(/dN1dy, dN1dx, dN2dy, dN2dx, dN3dy, dN3dx/)

  H(1,:)=(/dN1dx,   0d0, dN2dx,   0d0, dN3dx,   0d0/)
  H(2,:)=(/dN1dy,   0d0, dN2dy,   0d0, dN3dy,   0d0/)
  H(3,:)=(/  0d0, dN1dx,   0d0, dN2dx,   0d0, dN3dx/)
  H(4,:)=(/  0d0, dN1dy,   0d0, dN2dy,   0d0, dN3dy/)

  A_tmp=matmul(H,ed)

  A(1,:)=(/A_tmp(1),      0d0, A_tmp(3),      0d0/) 
  A(2,:)=(/     0d0, A_tmp(2),      0d0, A_tmp(4)/)
  A(3,:)=(/A_tmp(2), A_tmp(1), A_tmp(4), A_tmp(3)/)

  B=B+matmul(A,H)

  fe=matmul(transpose(B),es)*Area*t

end subroutine c2dtl3_f

! --------------- 4-node elements ---------------------------

! 4-node element based on updated Lagrangian formulation

!-- Updated Lagrangian

subroutine c2dul4_e(ke,coord,ep,D,ed,es)
  implicit none
  double precision                :: ke(:,:), coord(:,:), D(:,:,:)
  double precision                :: ed(:), es(:,:), ep

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), DetJ, JTinv(2,2)
  double precision                :: DNX(2,4)
  double precision                :: B(3,8)
  double precision                :: Dgp(3,3)
  DOUBLE PRECISION                :: stress(2,2)
  DOUBLE PRECISION                :: R(4,4)
  double precision                :: ucoord(2,4), He(4,8)

! write(*,*)'Warning not tested'
! stop

  ucoord(1,:)=coord(1,:)+ed([1,3,5,7])
  ucoord(2,:)=coord(2,:)+ed([2,4,6,8])

  JT=MATMUL(DNR4,transpose(ucoord))

  KE=0D0
  DO GP_NR=1,NGP

    JTinv=JT(index4(:,gp_nr),:)
    CALL inv2(JTinv)
    DNX=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
    DETJ=det2(JT(index4(:,gp_nr),:)) 

    B=0D0
    B(1,1:8:2)=dNx(1,:)
    B(2,2:8:2)=dNx(2,:)
    B(3,1:8:2)=dNx(2,:)
    B(3,2:8:2)=dNx(1,:)
  
    He=0d0
    He(1:2,1:8:2)=dNx(1:2,:)
    He(3:4,2:8:2)=dNx(1:2,:)

    stress(1,:)=(/es(1,gp_nr), es(3,gp_nr)/)
    stress(2,:)=(/es(3,gp_nr), es(2,gp_nr)/)

    R=0D0
    R(1:2,1:2)=stress(:,:)
    R(3:4,3:4)=stress(:,:)

    Dgp=D(:,:,gp_nr)
    KE = KE+(MATMUL(TRANSPOSE(B),MATMUL(Dgp,B)) &
         + MATMUL(MATMUL(TRANSPOSE(He),R),He))*DETJ*ep

  END DO
  RETURN
end subroutine c2dul4_e

! calculates the deformation gradient
subroutine c2dul4_d(dg,coord,ed)
  implicit none
  double precision                :: dg(:,:), coord(:,:),  ed(:)

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), JTinv(2,2)
  double precision                :: dNx(2,4)
  double precision                :: H(4,8)

  JT=MATMUL(DNR4,transpose(COORD))
   
  do GP_NR=1,NGP

   JTinv=JT(index4(:,gp_nr),:)
   CALL INV2(JTinv)
   dNx=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
 
   H=0d0
   H(1:2,1:8:2)=dNx(1:2,:)
   H(3:4,2:8:2)=dNx(1:2,:)
     
   dg(:,gp_nr)=Ifm+MATMUL(H,ED)

  end do
  return
end subroutine c2dul4_d

subroutine c2dul4_f(ef,coord,ep,ed,es)
  implicit none
  double precision                :: eF(:), coord(:,:),  ed(:), es(:,:), ep

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), DetJ, JTinv(2,2)
  double precision                :: DNX(2,4)
  double precision                :: B(3,8)
  double precision                :: ucoord(2,4)

  ucoord(1,:)=coord(1,:)+ed([1,3,5,7])
  ucoord(2,:)=coord(2,:)+ed([2,4,6,8])

  JT=MATMUL(DNR4,transpose(ucoord))

  EF = 0D0
  DO GP_NR=1,NGP

    JTinv=JT(index4(:,gp_nr),:)
    CALL inv2(JTinv)
    DNX=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
    DETJ=det2(JT(index4(:,gp_nr),:)) 

    B=0D0
    B(1,1:8:2)=dNx(1,:)
    B(2,2:8:2)=dNx(2,:)
    B(3,1:8:2)=dNx(2,:)
    B(3,2:8:2)=dNx(1,:)
  
    EF=EF+MATMUL(TRANSPOSE(B),es(:,gp_nr))*detJ*ep

  END DO

  RETURN
END subroutine c2dul4_f

!-- Total Lagrangian

! 4-node element based on total Lagrangian formulation
subroutine c2dtl4_e(ke,coord,ep,D,ed,es)
  implicit none
  double precision                :: ke(:,:), coord(:,:), D(:,:,:)
  double precision                :: ed(:), es(:,:), ep

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), DetJ, JTinv(2,2)
  double precision                :: DNX(2,4)
  double precision                :: B(3,8)
  double precision                :: Dgp(3,3)
  DOUBLE PRECISION                :: stress(2,2)
  DOUBLE PRECISION                :: H(4,8)
  DOUBLE PRECISION                :: R0(4,4), A(3,4), A_tmp(4)

!   write(*,*)'Warning not tested'
!   stop
  
  JT=MATMUL(DNR4,transpose(coord))

  KE=0D0
  DO GP_NR=1,NGP

    JTinv=JT(index4(:,gp_nr),:)
    CALL inv2(JTinv)
    DNX=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
    DETJ=det2(JT(index4(:,gp_nr),:)) 

    B=0D0
    B(1,1:8:2)=dNx(1,:)
    B(2,2:8:2)=dNx(2,:)
    B(3,1:8:2)=dNx(2,:)
    B(3,2:8:2)=dNx(1,:)

    H=0d0
    H(1:2,1:8:2)=dNx(1:2,:)
    H(3:4,2:8:2)=dNx(1:2,:)

    A_tmp=MATMUL(H,ED)
    A(1,:)=(/A_tmp(1),      0d0, A_tmp(3),      0d0/) 
    A(2,:)=(/     0d0, A_tmp(2),      0d0, A_tmp(4)/)
    A(3,:)=(/A_tmp(2), A_tmp(1), A_tmp(4), A_tmp(3)/)
      
    B=B+matmul(A,H)

    stress(1,:)=(/es(1,gp_nr), es(3,gp_nr)/)
    stress(2,:)=(/es(3,gp_nr), es(2,gp_nr)/)

    R0=0D0
    R0(1:2,1:2)=stress(:,:)
    R0(3:4,3:4)=stress(:,:)

    Dgp=D(:,:,gp_nr)
  
    KE=KE+(MATMUL(TRANSPOSE(B),MATMUL(Dgp,B)) &
           +MATMUL(MATMUL(TRANSPOSE(H),R0),H))*DETJ*ep

  END DO
  RETURN

end subroutine c2dtl4_e

! calculates the deformation gradient
subroutine c2dtl4_d(dg,coord,ed)
  implicit none
  double precision                :: dg(:,:), coord(:,:),  ed(:)

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), JTinv(2,2)
  double precision                :: dNx(2,4)
  double precision                :: H(4,8)

  JT=MATMUL(DNR4,transpose(COORD))
   
  do GP_NR=1,NGP

   JTinv=JT(index4(:,gp_nr),:)
   CALL INV2(JTinv)
   dNx=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
 
   H=0d0
   H(1:2,1:8:2)=dNx(1:2,:)
   H(3:4,2:8:2)=dNx(1:2,:)  
   dg(:,gp_nr)=Ifm+MATMUL(H,ED)

  end do
  return
end subroutine c2dtl4_d

! calculates internal force
subroutine c2dtl4_f(ef,coord,ep,ed,es)
  implicit none
  double precision                :: EF(:), coord(:,:)
  double precision                :: ed(:), es(:,:), ep

  integer, parameter              :: NGP=4
  integer                         :: gp_nr

  double precision                :: JT(8,2), DetJ, JTinv(2,2)
  double precision                :: DNX(2,4)
  double precision                :: B(3,8)
  DOUBLE PRECISION                :: H(4,8)
  DOUBLE PRECISION                :: A(3,4), A_tmp(4)

!   write(*,*)'Warning not tested'
!   stop
  
  JT=MATMUL(DNR4,transpose(coord))

  EF=0D0
  DO GP_NR=1,NGP

    JTinv=JT(index4(:,gp_nr),:)
    CALL inv2(JTinv)
    DNX=MATMUL(JTinv,DNR4(index4(:,gp_nr),:))
    DETJ=det2(JT(index4(:,gp_nr),:)) 

    B=0D0
    B(1,1:8:2)=dNx(1,:)
    B(2,2:8:2)=dNx(2,:)
    B(3,1:8:2)=dNx(2,:)
    B(3,2:8:2)=dNx(1,:)

    H=0d0
    H(1:2,1:8:2)=dNx(1:2,:)
    H(3:4,2:8:2)=dNx(1:2,:)

    A_tmp=MATMUL(H,ED)
    A(1,:)=(/A_tmp(1),      0d0, A_tmp(3),      0d0/) 
    A(2,:)=(/     0d0, A_tmp(2),      0d0, A_tmp(4)/)
    A(3,:)=(/A_tmp(2), A_tmp(1), A_tmp(4), A_tmp(3)/)
    
    B=B+matmul(A,H)

    EF=EF+MATMUL(TRANSPOSE(B),es(:,gp_nr))*detJ*ep

  END DO
  RETURN

end subroutine c2dtl4_f



! ----- help routines - should be moved

function DET2(A)
  IMPLICIT NONE
  DOUBLE PRECISION                :: DET2
  DOUBLE PRECISION                :: A(:,:)

  DET2=A(1,1)*A(2,2)-A(2,1)*A(1,2)

RETURN
END function det2


subroutine inv2(A)
  implicit none
  double precision                :: A(:,:), Atmp(2,2)

  double precision                :: detA

  detA=A(1,1)*A(2,2)-A(1,2)*A(2,1)
  Atmp(1,:)=(/ A(2,2),-A(1,2)/)/detA
  Atmp(2,:)=(/-A(2,1), A(1,1)/)/detA
  A=Atmp

return
end subroutine inv2
end module elem_large_cont_2d
