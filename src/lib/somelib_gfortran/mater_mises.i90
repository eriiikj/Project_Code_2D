# 1 "/home/er7128ja/Nextcloud/Projekt/Project_Code_2D/src/lib/somelib_gfortran/mater_mises.f90"
module mater_mises

! last modified
! M. Ristinmaa 2020-03-10
!  - implemented
!
! ------------------------------------------------------------------------------
!


implicit none

! flags for
!  old = equilibrium state
!  new = iterative state
integer                             :: old, new
private old, new

double precision                    :: Del(6,6)
double precision                    :: E, v, sy0, H, G, K
private Del, E, v, Sy0, H, G, K

integer                             :: nelm, ngp
private nelm, ngp

double precision, allocatable      :: epeff(:,:,:), dLambda(:,:), stress_stored(:,:,:,:)
private epeff, dLambda, stress_stored

double precision                    :: m6(6), ind6(6,6), mm6(6,6)
parameter   (m6=[(/1d0,1d0,1d0,0d0,0d0,0d0/)])
parameter   (ind6=[(/1d0, 0d0, 0d0, 0d0,   0d0,  0d0/), &
                   (/0d0, 1d0, 0d0,  0d0,  0d0,  0d0/), &
                   (/0d0, 0d0, 1d0,  0d0,  0d0,  0d0/), &
                   (/0d0, 0d0, 0d0,0.5d0,  0d0,  0d0/), &
                   (/0d0, 0d0, 0d0,  0d0,0.5d0,  0d0/), &
                   (/0d0, 0d0, 0d0,  0d0,  0d0,0.5d0/)])
parameter   (mm6=[(/1d0,1d0,1d0,0d0,0d0,0d0/), &
                  (/1d0,1d0,1d0,0d0,0d0,0d0/), &
                  (/1d0,1d0,1d0,0d0,0d0,0d0/), &
                  (/0d0,0d0,0d0,0d0,0d0,0d0/), &
                  (/0d0,0d0,0d0,0d0,0d0,0d0/), &
                  (/0d0,0d0,0d0,0d0,0d0,0d0/)])
private m6, ind6, mm6



interface d_mises2d
   module procedure d_mises2d_el1
   module procedure d_mises2d_el2
   module procedure d_mises2d_gp
end interface

interface stress_mises2d
   module procedure stress_mises2d1
   module procedure stress_mises2d2
end interface

interface getValScalar_mises
   module procedure getValScalar_mises1
   module procedure getValScalar_mises2
end interface

interface getValVector_mises
   module procedure getValVector_mises1
   module procedure getValVector_mises2
end interface
private mises

!-------------------------------------------------------------------------------

contains

subroutine init_mises(Ein,vin,sy0in,Hin,nelmin,ngpin)
! initiate routine
! store material parameters

  implicit none
  double precision                :: Ein, vin, sy0in, Hin
  integer                         :: nelmin, ngpin

  double precision                :: E, v, tmp
  integer                         :: ierr

  New=1
  Old=2

  nelm=nelmin
  ngp=ngpin

  E=Ein
  v=vin
  sy0=sy0in
  H=Hin

  G=E/2d0/(1d0+v)
  K=E/3d0/(1d0-2d0*v)

! Elastic stiffness
  tmp=(1d0-2d0*v)*0.5d0
  Del=E/(1d0+v)/(1d0-2d0*v)&
     *reshape((/1d0-v,     v,     v,   0d0,   0d0,   0d0,&
                    v, 1d0-v,     v,   0d0,   0d0,   0d0,&
                    v,     v, 1d0-v,   0d0,   0d0,   0d0,&
                  0d0,   0d0,   0d0,   tmp,   0d0,   0d0,&
                  0d0,   0d0,   0d0,   0d0,   tmp,   0d0,&
                  0d0,   0d0,   0d0,   0d0,   0d0,   tmp/), &
                [6,6], order=[2,1])

! allocate for storage

! internal variable = effective plastic strain
  allocate(epeff(Ngp,nelm,2), stat=ierr)   
  epeff=0d0

! internal variable = effective plastic strain
  allocate(dlambda(Ngp,nelm), stat=ierr)   
  dlambda=0d0

! stress tensor
  allocate(stress_stored(6,Ngp,nelm,2), stat=ierr)   
  stress_stored=0d0

  return
end subroutine init_mises


subroutine stress_mises2d1(stress,de,ie)
! calculate stresses for plane strain

  implicit none
  double precision                :: stress(:), de(3)
  integer                         :: ie

  double precision                :: ss(6)

  call stress_mises3d(ss,(/de(1),de(2),0d0,de(3),0d0,0d0/),ie,1)
  stress(:)=(/ss(1),ss(2),ss(3),ss(4)/)

  return
end subroutine stress_mises2d1


subroutine stress_mises2d2(stress,de,ie)
! calculate stresses for plane strain

  implicit none
  double precision                :: stress(:,:), de(:,:)
  integer                         :: ie, gp

  double precision                :: ss(6)

  do gp=1,ngp

    call stress_mises3d(ss,(/de(1,gp),de(2,gp),0d0,de(3,gp),0d0,0d0/),ie,gp)
    stress(:,gp)=(/ss(1),ss(2),ss(3),ss(4)/)

  end do

  return
end subroutine stress_mises2d2


subroutine stress_mises2d3(stress,de,ie,gp)
! calculate stresses for plane strain

  implicit none
  double precision                :: stress(:), de(3)
  integer                         :: ie, gp

  double precision                :: ss(6)

  call stress_mises3d(ss,(/de(1),de(2),0d0,de(3),0d0,0d0/),ie,gp)
  stress=(/ss(1),ss(2),ss(3),ss(4)/)

  return
end subroutine stress_mises2d3


subroutine mises(svm,ss)
  implicit none
  double precision                :: svm, ss(:)
  double precision                :: s(3,3)

    s(1,:)=(/ss(1),ss(4),ss(5)/)
    s(2,:)=(/ss(4),ss(2),ss(6)/)
    s(3,:)=(/ss(5),ss(6),ss(3)/)

  svm=dsqrt(s(1,1)**2D0+s(2,2)**2D0+s(3,3)**2D0-s(1,1)*s(2,2)-s(1,1)*s(3,3)-s(2,2)*s(3,3)&
                         +3D0*s(1,2)**2D0+3D0*s(1,3)**2D0+3D0*s(2,3)**2D0)

  return
end subroutine mises


subroutine stress_mises3d(stress,depsilon,ie,gp) 
! calculate stresses

  implicit none
  double precision                :: stress(:), depsilon(:)
  integer                         :: ie, gp

  double precision                :: sefft, seff, sy, yield
  double precision                :: pressure, dl
  double precision                :: sdevt(6), sdev(6)

! trial stress
  stress=stress_stored(:,gp,ie,old)+matmul(Del,depsilon)
  call mises(sefft,stress)

  sy=sy0+H*epeff(gp,ie,old)
  yield=sefft-sy

  dl=0d0
  if (yield.gt.0d0) then

! plastic responce
    pressure=(stress(1)+stress(2)+stress(3))/3d0
    sdevt=stress-pressure*m6
    
    dl=(sefft-sy)/(3d0*G+H)
    seff=sefft-3d0*G*dl

    sdev=seff/sefft*sdevt
    stress=sdev+pressure*m6
  end if

  stress_stored(:,gp,ie,new)=stress
  epeff(gp,ie,new)=epeff(gp,ie,old)+dl
  dLambda(gp,ie)=dl

  return
end subroutine stress_mises3d


subroutine d_mises2d_el1(D,ie)
! calculate material tangent stiffness

  implicit none
  double precision                :: D(:,:,:)
  integer                         :: ie

  integer                         :: gp

  do gp=1,ngp
    call d_mises2d_gp(D(:,:,gp),ie,gp)
  end do

  return
end subroutine d_mises2d_el1

subroutine d_mises2d_el2(D,ie)
! calculate material tangent stiffness

  implicit none
  double precision                :: D(:,:)
  integer                         :: ie

  call d_mises2d_gp(D,ie,1)

  return
end subroutine d_mises2d_el2


subroutine d_mises2d_gp(D,ie,gp)
! calculate material tangent stiffness

  implicit none
  double precision                :: D(3,3)
  integer                         :: ie, gp

  double precision                :: D6(6,6)

  call d_mises3d(D6,ie,gp)

  D(1,:)=D6(1,[1,2,4])
  D(2,:)=D6(2,[1,2,4])
  D(3,:)=D6(4,[1,2,4])

  return
end subroutine d_mises2d_gp


subroutine d_mises3d(D,ie,gp)
! calculate material tangent stiffness

  implicit none
  double precision                :: D(6,6)
  integer                         :: ie, gp

  double precision                :: dl, seff_old, seff_new, seff_test
  double precision                :: beta, gamm, kapp 
  double precision                :: ssm(6,6), pressure, sdev(6)

  D=Del
  dl=dlambda(gp,ie) 

  if (dl.gt.0d0) then

    seff_old=sy0+H*epeff(gp,ie,old) 
    seff_new=sy0+H*epeff(gp,ie,new)
    seff_test=(seff_new+3*G*dl)

    beta=seff_old/seff_test
    gamm=(H+3d0*G*beta)/(H+3d0*G)
    kapp=9d0*G**2d0/(H+3d0*G)*beta

    pressure=(stress_stored(1,gp,ie,new) &
             +stress_stored(2,gp,ie,new) &
             +stress_stored(3,gp,ie,new))/3d0
    sdev=stress_stored(:,gp,ie,new)-pressure*m6
    ssm(1,:)=sdev(1)*sdev(:)/seff_new**2d0
    ssm(2,:)=sdev(2)*sdev(:)/seff_new**2d0
    ssm(3,:)=sdev(3)*sdev(:)/seff_new**2d0
    ssm(4,:)=sdev(4)*sdev(:)/seff_new**2d0
    ssm(5,:)=sdev(5)*sdev(:)/seff_new**2d0
    ssm(6,:)=sdev(6)*sdev(:)/seff_new**2d0

    D=2d0*G*gamm*(Ind6-1d0/3d0*mm6)+K*mm6-kapp*ssm

  end if

  return
end subroutine d_mises3d


subroutine accept_mises()
! accept the state to be an equilibrium state
  implicit none

! This must be done otherwise the tangent stiffness
! in the first iteration is calculated at the n-1 state
! Find a solution such that this copy is not needed
! maybe use pointers that are switched
!
  epeff(:,:,old)=epeff(:,:,new)
! dLambda=0d0
  stress_stored(:,:,:,old)=stress_stored(:,:,:,new)

!  if (New.eq.1) then
!    New=2
!    Old=1
!  else
!    New=1
!    Old=2
!  endif

  return
end subroutine accept_mises

subroutine getValScalar_mises1(stype,outval)
! get some scalar internal variables
  implicit none
  character(len=*)                :: stype
  double precision                :: outval(:,:)

  if (stype.eq.'plastic') then
    outval=0d0
    where(dLambda(:,:).gt.0d0) outval=1d0   !dl
  else
    stop "Variable does not exist"
  end if

  return
end subroutine getValScalar_mises1

subroutine getValScalar_mises2(stype,outval)
! get some scalar internal variables
  implicit none
  character(len=*)                :: stype
  double precision                :: outval(:)

  if (stype.eq.'plastic') then
    outval=0d0
    where(dLambda(1,:).gt.0d0) outval=1d0   !dl
  else
    stop "Variable does not exist"
  end if

  return
end subroutine getValScalar_mises2


subroutine getValVector_mises1(stype,outval,ie)
! get some vector internal variables
 implicit none
  integer                         :: ie
  character(len=*)                :: stype
  double precision                :: outval(:,:)

  if (stype.eq.'stress') then
    outval=stress_stored([1,2,3,4],:,ie,new)
!    write(*,*)'s ',stress_stored([1,2,3,4],:,ie,new)
  else
    write(*,*)'In elem_small_cont_2d, get ValVector'
    write(*,*)'Not implemented ',stype
    stop
  end if
  return
end subroutine getValVector_mises1

subroutine getValVector_mises2(stype,outval,ie)
! get some vector internal variables
 implicit none
  integer                         :: ie
  character(len=*)                :: stype
  double precision                :: outval(:)

  if (stype.eq.'stress') then
    outval=stress_stored([1,2,3,4],1,ie,new)
!    write(*,*)'s ',stress_stored([1,2,3,4],:,ie,new)
  else
    write(*,*)'In elem_small_cont_2d, get ValVector'
    write(*,*)'Not implemented ',stype
    stop
  end if
  return
end subroutine getValVector_mises2


end module mater_mises
